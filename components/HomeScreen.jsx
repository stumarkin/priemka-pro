
import { useState, useEffect } from 'react';
import BannerView from './BannerView';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { StatusBar } from 'expo-status-bar';
import { 
    Alert,
    View, 
    ScrollView, 
    Pressable, 
    LinearGradient
} from 'react-native';
import { 
    ThemeProvider, 
    Text, 
    Button, 
    ListItem,
    Divider,
    Icon
} from '@rneui/themed';
import { theme } from './theme';
import axios from 'axios';
import * as SecureStore from 'expo-secure-store';

import { init, track } from '@amplitude/analytics-react-native';
init('c8698f1fccc72a1744388b9e1341b833', 'stumarkin@mail.ru');


const inclineWord = ( howMany, ofWhat, humanicStyle = false ) => {
    switch (ofWhat){
        case "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫":
            if ([11,12,13,14].includes(howMany)){
                return `${howMany} –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤`;
            }
            switch ( howMany - (Math.floor(howMany/10)*10) ){
                case 0: if (humanicStyle) {return `–ø–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤`}
                case 1: return `${howMany} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫`
                case 2:
                case 3:
                case 4: return `${howMany} –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞`
                default: return `${howMany} –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤`
            }
        
        case "–ø—Ä–æ–≤–µ—Ä–∫–∞":
            if ([11,12,13,14].includes(howMany)){
                return `${howMany} –ø—Ä–æ–≤–µ—Ä–æ–∫`;
            }
            switch ( howMany - (Math.floor(howMany/10)*10) ){
                case 1: return `${howMany} –ø—Ä–æ–≤–µ—Ä–∫–∞`
                case 2:
                case 3:
                case 4: return `${howMany} –ø—Ä–æ–≤–µ—Ä–∫–∏`
                default: return `${howMany} –ø—Ä–æ–≤–µ—Ä–æ–∫`
            }

        case "–ø—Ä–∏—ë–º–∫–∞":
            if ([11,12,13,14].includes(howMany)){
                return `${howMany} –ø—Ä–∏—ë–º–æ–∫`;
            }
            switch ( howMany - (Math.floor(howMany/10)*10) ){
                case 1: return `${howMany} –ø—Ä–∏—ë–º–∫–∞`
                case 2:
                case 3:
                case 4: return `${howMany} –ø—Ä–∏—ë–º–∫–∏`
                default: return `${howMany} –ø—Ä–∏—ë–º–æ–∫`
            }
        default: return `${howMany} ${ofWhat}`
    }
  }

const  generateId = (length) => {
    let result = '';
    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
    let i = 0;
    while (i < length) {
        i += 1;
        result += i%5 ? [...characters][Math.floor(Math.random() * characters.length)] : '-';
    }
    return result;
}

const getDeviceId = async () => {
    let deviceId = await SecureStore.getItemAsync('deviceId');
    if (!deviceId) {
        deviceId = generateId(19);
        await SecureStore.setItemAsync('deviceId', deviceId);
    }
    return deviceId;
}




export default function HomeScreen ({navigation}) {
    // AsyncStorage.clear(); 
    const [storedForms, setStoredForms] = useState([]);
    const [banners, setBanners] = useState([]);
    const [deviceId, setDeviceId] = useState(null)
    const [isPro, setIsPro] = useState( false )
    const [counter, setCounter] = useState( 0 )

    
    const updateStoredForms = () => {
        AsyncStorage.getAllKeys()
        .then( keys => {
            AsyncStorage.multiGet( keys.filter( key => key.indexOf('form') > -1) )
            .then( res => setStoredForms(res))
        })
    }



    // Initial
    useEffect(() => {
        // Device Id
        getDeviceId()
        .then(deviceId =>{ 
            setDeviceId(deviceId)
            track('HomeScreenView', { deviceId });
              
        } )
        
        // Previous Forms
        updateStoredForms()

        // Banner loading
        axios.get(`https://priemka-pro.ru/api/v2/?method=getbanners`)
        .then(res => {
            if (typeof res.data == 'object'){
                setBanners( res.data );
            } else {
                console.log( 'Banner load fail. API response:\n' + res.data ) 
            }
        }) 
    }, []); 

    // isPro
    useEffect(()=>{
        if (deviceId) {
            axios.get(`https://priemka-pro.ru/api/v2/?method=ispro&deviceid=${deviceId}`)
            .then(res => {
                if (typeof res.data == 'object'){
                    setIsPro( res.data.isPro );
                } else {
                    console.log( 'isPro load fail. API response:\n' + res.data ) 
                }
                
            })
        }
    },[deviceId, counter]) 


    // Banners with sections sorting
    const bannersUI = {}
    const bannerSections = banners.map(({section})=>(section)).filter( (item, i, arr) => arr.indexOf(item) === i );
    bannerSections.forEach( section_ => {bannersUI[section_] = banners.filter( ({section}) => section == section_ ).map( (banner, i) => (
        <BannerView {...banner} i  onPress={() =>{
            track('BannerPress', { deviceId, banner: banner.header }); 
            navigation.navigate('Webview', {title: '', deviceid: deviceId, callback: ()=>{setCounter(counter+1)}, url: banner.webviewUrl + (banner.webviewUrl.indexOf('?')>-1 ? '&' : '?') + 'deviceid=' + deviceId })
         }}/>
    ))} )


    return (
        <ScrollView>
            <View style={{ padding: 20, paddingTop: 100}}>
                <ThemeProvider theme={theme}>
                    <View
                        style={[{justifyContent: 'space-between', flexDirection: 'row',}]}
                    >
                        <Text style={{fontSize: 36, fontWeight: 700, marginBottom: 20}}>–ü—Ä–∏—ë–º–∫–∞</Text>
                        
                        {
                            isPro ? (
                                <Button 
                                    title="Pro –ø–æ–¥–∫–ª—é—á–µ–Ω üöÄ"
                                    containerStyle={{ }} 
                                    buttonStyle={{ 
                                        marginTop: 12,
                                        width: 130,
                                        backgroundColor: '#DDD',
                                        borderColor: 'transparent',
                                        borderWidth: 0,
                                        borderRadius: 5,
                                        padding: 4,
                                    }}
                                    titleStyle={{
                                        fontSize: 12,
                                        color: 'black'
                                    }}
                                    onPress={ ()=>navigation.navigate('Webview', {title: '', deviceid: deviceId, callback: ()=>{setCounter(counter+1)}, url: 'https://priemka-pro.ru/webview/pro/?deviceid=' + deviceId }) }
                                />
                            ) : null
                        }
                    </View>

                    {!isPro ? bannersUI.top : bannersUI.pro}

                    <BannerView 
                        i="new"
                        header='–ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞'
                        text= { !isPro ? <Text style={{ fontSize: 14 }}>
                                            –î–æ—Å—Ç—É–ø–Ω–æ –µ—â–µ {inclineWord(5 - (storedForms.length || 0), '–ø—Ä–∏—ë–º–∫–∞')}.{'\n'}–ù–∞ Pro –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç.
                                        </Text> : <Text style={{ fontSize: 14 }}>
                                            Pro –ø–æ–¥–∫–ª—é—á–µ–Ω. –í–∞—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!
                                        </Text>   
                        }
                        actionControls={ <Button
                                            title='–ù–æ–≤–∞—è –ø—Ä–∏—ë–º–∫–∞' 
                                            onPress={() =>{
                                                if ( isPro || storedForms.length<5 ){
                                                track('NewAcceptancePress', { deviceId });
                                                    navigation.navigate('Apartment', {updateStoredForms: updateStoredForms});
                                                } else {
                                                    Alert.alert('–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ Pro üöÄ', '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø—Ä–∏—ë–º–∫–æ–π 5 –∫–≤–∞—Ä—Ç–∏—Ä.\n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ Pro, –≤ –Ω–µ–º –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.')
                                                }
                                            }}
                                        />
                        }
                    />                
                    
                    <BannerView 
                        i="prev"
                        header='–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–∏—ë–º–∫–∏'
                        text= { storedForms.length==0 ? '–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –ø—Ä–∏–µ–º–∫–∏. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏—ë–º–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ' : null }
                        actionControls={
                            storedForms.map( ([key, valueJSON]) => {
                                const value = JSON.parse(valueJSON);
                                return (
                                        <ListItem 
                                            key={key} 
                                            containerStyle={{paddingHorizontal: 0}}
                                            onPress={ () =>{ 
                                                track('PreviousAcceptancePress', { deviceId });
                                                navigation.navigate('Apartment', {formId: key.split('_')[1], updateStoredForms, isPro}) 
                                            }}
                                        >
                                            <ListItem.Content>
                                                <ListItem.Title style={{fontWeight: 600}}>{value.address ? value.address : '–ë–µ–∑ –∞–¥—Ä–µ—Å–∞'}</ListItem.Title>
                                                <ListItem.Subtitle style={{fontSize: 14}}>{inclineWord(value.checksCountTotal, "–ø—Ä–æ–≤–µ—Ä–∫–∞")}, {inclineWord(value.failChecksCountTotal, "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫", true)}</ListItem.Subtitle>
                                            </ListItem.Content>
                                            <ListItem.Chevron />
                                        </ListItem>
                                )
                        })}
                    />                

                    {bannersUI.bottom}

                    <Text style={{ textAlign: 'center', fontSize: 12 }}>{deviceId}</Text>
                    <StatusBar style="auto" />
                </ThemeProvider>
            </View>
        </ScrollView>
    );
  };